-- Language to parse the proof script. Not to parse rules.

DProofScript. ProofScript ::= ProgBindings [Theorem];

DProgBindings. ProgBindings ::= "bindings" "{" [ProgBinding] "}";
terminator ProgBinding ".";

DProgBinding. ProgBinding ::= CapitalIdent "=" LetBindings;

token CapitalIdent (upper letter*);

comment "--";
comment "{-" "-}";

--------------- Terms ------------------------------

-- har inte med var här iom att vi inte ska parsea ngt annat än konkreta termer.
LBSet.   LetBindings ::= "{" [LetBinding] "}";
separator LetBinding ",";

DLetBinding. LetBinding ::= Ident BindSymbol Term;

BSWeights.  BindSymbol ::= "=[" StackWeight "," HeapWeight "]=";
BSNoWeight. BindSymbol ::= "=";

StackWeightExpr. StackWeight ::= IntExpr;
HeapWeightExpr.  HeapWeight ::= IntExpr;

IEVar.   IntExpr1 ::= Ident;
IENum.   IntExpr1 ::= Integer;
IEPlus.  IntExpr  ::= IntExpr "+" IntExpr1;
IEMinus. IntExpr  ::= IntExpr "-" IntExpr1;
coercions IntExpr 1;

DRedWeight. RedWeight ::= "[" StackWeight "]";

TAny.             Term1 ::= "?";
TTermVar.         Term1 ::= CapitalIdent;
TNonTerminating.  Term1 ::= "¤" ;
TVar.             Term1 ::= Ident;
TNum.             Term1 ::= Integer;
THole.            Term  ::= "[.]";
-- Temporary. Might want to do separate grammar for contexts.
-- TConstructor.     Term  ::= Constructor;
-- TLam.             Term  ::= "\\" Ident "." Term ;
-- TLet.             Term  ::= "let" LetBindings "in" Term;
-- TRedWeight.       Term  ::= RedWeight Reduction1;
-- TRed.             Term  ::= Reduction;
TStackSpike.      Term  ::= "s^" Term;
-- TStackSpikes.     Term  ::= "["StackWeight"]s^" Term;
-- THeapSpike.       Term  ::= "h^" Term;
-- THeapSpikes.      Term  ::= "["HeapWeight"]h^" Term;
-- TDummyBinds.      Term  ::= VarSet "d^" Term;
coercions Term 1;

--RCase.       Reduction1 ::= "case" Term "of" "{" [CaseStm] "}";
--RApp.        Reduction1 ::= Term Var;
--RAppInd.     Reduction1 ::= Term "^" IndExpr Var;
--RAddConst.   Reduction1 ::= "add" Integer Term;
--RIsZero.     Reduction1 ::= "iszero" Term;
--RSeq.        Reduction  ::= "seq" Term Term ;
--RPlusWeight. Reduction  ::= Term "+" RedWeight Term;
--RPlus.       Reduction  ::= Term "+" Term;
--coercions Reduction 1;

DIndExpr. IndExpr ::= IntExpr1;
GeneralConstructor. Constructor ::= Ident [Var];
ConsConstructor. Constructor ::= Ident ":" Ident;
-- Ev inte cons här, men vi gör så just nu.
DVar. Var ::= Ident;
separator Var " ";
DVarSet. VarSet ::= "{" [Var] "}"; -- variables are separated by space.

CaseStmAlts.     CaseStm ::= "alts";
CaseStmConcrete. CaseStm ::= Constructor "->" Term;
separator CaseStm ",";

--------------- Theorem --------------------

DTheorem.     Theorem ::= Proposition Proof;
separator Theorem "";
DProposition. Proposition ::= "proposition" ":" InContext Term ImpRel Term ".";
DProof.       Proof ::= "proof" ":" "()" ;-- CommandName [CmdArgument] [SubProof] Qed ".";
DQed.         Qed ::= "qed";

WithContext. InContext ::= CapitalIdent "|-";
NoContext.   InContext ::= "|-";

DefinedEqual.        ImpRel ::= "=def=";
StrongImprovementLR. ImpRel ::= "|~>";
WeakImprovementLR.   ImpRel ::= "|~~>";
StrongImprovementRL. ImpRel ::= "<~|";
WeakImprovementRL.   ImpRel ::= "<~~|";
StrongCostEquiv.     ImpRel ::= "<~>";
WeakCostEquiv.       ImpRel ::= "<~~>";

-- token CommandName ((letter | '¤' ) (letter | '-' | '¤' | digit| '\'')*);

-- CAValue.          CmdArgument ::= CmdValue;
-- CAAssign.         CmdArgument ::= CmdAssignee "=" CmdValue ;
-- CVTerm.           CmdValue ::= Term1;
-- CVLetBindings.    CmdValue ::= LetBindings;
-- CVContext.        CmdValue ::= Context;
-- CVVarSet.         CmdValue ::= VarSet;
-- CASmallVar.       CmdAssignee ::= Ident;
-- CABigVar.         CmdAssignee ::= CapitalIdent;

-- ContextTerm.      Context ::= Term; -- Obs Temporary.
-- obs whole

-- separator CmdArgument " ";

-- DSubProof. SubProof ::= CommandName "{" "}";
-- separator SubProof "";
