-- Language to parse the proof script. Not to parse rules.

entrypoints ProofScript;

DProofScript. ProofScript ::= ProgBindings [Theorem];

DProgBindings. ProgBindings ::= "bindings" "{" [ProgBinding] "}";
terminator ProgBinding ";";

DProgBinding. ProgBinding ::= CapitalIdent "="  LetBindings  ;

token CapitalIdent (upper letter*);

comment "--";
comment "{-" "-}";

--------------- Terms ------------------------------

LBSAny.   LetBindings ::= "?";
LBSVar.   LetBindings ::= CapitalIdent;
LBSSet.   LetBindings ::= "{" [LetBinding] "}";
separator LetBinding ",";

LBAny.      LetBinding ::= "?";
LBConcrete. LetBinding ::= Var BindSymbol Term;

BSWeights.  BindSymbol ::= "=[" StackWeight "," HeapWeight "]=";
BSNoWeight. BindSymbol ::= "=";

StackWeightExpr. StackWeight ::= IntExpr;
HeapWeightExpr.  HeapWeight ::= IntExpr;

IEAny.   IntExpr1 ::= "?";
IEVar.   IntExpr1 ::= Ident;
IENum.   IntExpr1 ::= Integer;
IEPlus.  IntExpr  ::= IntExpr "+" IntExpr1;
IEMinus. IntExpr  ::= IntExpr "-" IntExpr1;
coercions IntExpr 1;

DRedWeight. RedWeight ::= "[" StackWeight "]";

TAny.             Term3 ::= "?";
TTermVar.         Term3 ::= "any" "(" CapitalIdent ")";
TNonTerminating.  Term3 ::= "@" ;
TVar.             Term3 ::= Var;
TNum.             Term3 ::= Integer;
THole.            Term3  ::= "[.]";
TIndVar.          Term3  ::= Var "^" IndExpr;
TConstructor.     Term3  ::= Constructor;
TStackSpike.      Term3  ::= "s^" Term3;
TStackSpikes.     Term3 ::= "["StackWeight"]s^" Term3;
THeapSpike.       Term3  ::= "h^" Term3;
THeapSpikes.      Term3  ::= "["HeapWeight"]h^" Term3;
TDummyBinds.      Term3  ::= VarSet "d^" Term3;

TRApp.     Term2    ::= Term2 Var;
TRAppW.    Term2    ::= RedWeight "(" Term2 Var ")";

TRPlus.    Term1    ::= Term1 "+" Term2;
TRPlusW1.  Term1    ::= RedWeight "(" Term1 "+" Term2 ")";
TRPlusW2.  Term1    ::= Term1 "+" RedWeight Term2;
TRPlusWW.  Term1    ::= RedWeight "(" Term1 "+" RedWeight Term2 ")";

TAbs.   Term     ::= "\\" Var "." Term            ;
TLet.   Term     ::= "let" LetBindings "in" Term;

TRCase.       Term ::= MaybeRedWeight "case" Term "of" "{" [CaseStm] "}";
TRAddConst.   Term ::= MaybeRedWeight "add" Integer Term1;
TRIsZero.     Term ::= MaybeRedWeight "iszero" Term1;
TRSeq.        Term ::= MaybeRedWeight "seq" Term3 Term3;

coercions Term 3;

WithRedWeight. MaybeRedWeight ::= RedWeight;
NoRedWeight.   MaybeRedWeight ::= ;

DIndExpr. IndExpr ::= IntExpr1;
CGeneral. Constructor ::= CapitalIdent "(" [Var] ")";
CCons. Constructor ::= Var ":" Var;
CTrue. Constructor ::= "true";
CFalse. Constructor ::= "false";
DVar. Var ::= Ident;
separator Var "";
DVarSet. VarSet ::= "{" [Var] "}"; -- variables are separated by space.

separator CaseStm ",";
CSConcrete. CaseStm ::= Constructor "->" Term;

--------------- Theorem --------------------

DTheorem.     Theorem ::= Proposition Proof;
separator Theorem "";
DProposition. Proposition ::= "proposition" ":" InContext Free "|-" Term ImpRel Term ";";
DQed.         Qed ::= "qed";

PByFPInduction.   Proof ::= "proof" ":" "-fix-point-induction" Var
                            "-base" "{" [ProofStep] "}"
                            "-induction" "{" [ProofStep] "}" Qed ";" ;
PStraightForward. Proof ::= "proof" ":" "-simple"
                            "-single" "{" [ProofStep] "}" Qed ";" ;
PGeneral.         Proof ::= "proof" ":" CommandName [CmdArgument]
                            [SubProof] Qed ";";

WithContext. InContext ::= CapitalIdent;
NoContext.   InContext ::= ;

WithFree. Free ::= "free" "(" [VarAnyType] ")" ;
NoFree.   Free ::= ;

DefinedEqual.        ImpRel ::= "=def=";
StrongImprovementLR. ImpRel ::= "|~>";
WeakImprovementLR.   ImpRel ::= "|~~>";
StrongImprovementRL. ImpRel ::= "<~|";
WeakImprovementRL.   ImpRel ::= "<~~|";
StrongCostEquiv.     ImpRel ::= "<~>";
WeakCostEquiv.       ImpRel ::= "<~~>";

token CommandName ('-' (letter | '@' ) (letter | '-' | '@' | digit| '\'')*);
-- copied to SieLaws

CAValue.          CmdArgument ::= CmdValue;
CAAssign.         CmdArgument ::= CmdAssignee "=" CmdValue ;
CVTermOrCtx.      CmdValue    ::=  Term3 ;
CVLetBindings.    CmdValue    ::= "let" LetBindings;
CVVarSet.         CmdValue    ::= VarSet;
CASmallVar.       CmdAssignee ::= VarAnyType;
CADummySet.       CmdAssignee ::= "{" CapitalIdent "}";

BigVar.   VarAnyType ::= CapitalIdent;
SmallVar. VarAnyType ::= Ident;
separator VarAnyType " ";

separator CmdArgument " ";

DSubProof. SubProof ::= CommandName "{" [ProofStep] "}";
separator SubProof "";

PSCmd.         ProofStep ::= "on" SubTerm TransCmd ";";
PSImpRel.      ProofStep ::= ImpRel;
PSTerm.        ProofStep ::= Term ";";
PSHereMarker.  ProofStep ::= "$";
terminator ProofStep "";

CmdSpecial. TransCmd ::= SpecialTransCmd;
CmdGeneral. TransCmd ::= CommandName [CmdArgument];

STWholeWithCtx. SubTerm ::= "whole";
STShown.        SubTerm ::= "shown";
STTerm.  SubTerm ::=  Term3  ;
STGuess. SubTerm ::= "guess";

STCAlphaEquiv.  SpecialTransCmd ::= "-alpha-equiv";
STCReorderCase. SpecialTransCmd ::= "-reorder-case" "(" [Var] ")";
STCReorderLet.  SpecialTransCmd ::= "-reorder-let" "(" [Var] ")";
