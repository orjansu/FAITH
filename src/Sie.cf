-- Language to parse the proof script.

DProofScript. ProofScript ::= ProgBindings [Theorem];

DProgBindings. ProgBindings ::= "bindings" "{" [ProgBinding] "}";
terminator ProgBinding ".";

DProgBinding. ProgBinding ::= CapitalIdent "=" LetBindings;

token CapitalIdent (upper letter*);

comment "--";
comment "{-" "-}";

--------------- Terms ------------------------------

LBVar.   LetBindings ::= CapitalIdent;
LBSet.   LetBindings ::= "{" [LetBinding] "}";
separator LetBinding ",";

DLetBinding. LetBinding ::= Ident BindSymbol Term;

BSWeights.  BindSymbol ::= "=[" StackWeight "," HeapWeight "]=";
BSNoWeight. BindSymbol ::= "=";

StackWeightExpr. StackWeight ::= IntExpr;
HeapWeightExpr.  HeapWeight ::= IntExpr;

IEVar.   IntExpr1 ::= Ident;
IENum.   IntExpr1 ::= Integer;
IEPlus.  IntExpr  ::= IntExpr "+" IntExpr1;
IEMinus. IntExpr  ::= IntExpr "-" IntExpr1;
coercions IntExpr 1;

DRedWeight. RedWeight ::= "[" StackWeight "]";

TAny.             Term ::= "?";
TTermVar.         Term ::= CapitalIdent;
TNonTerminating.  Term ::= "¤" ;
TVar.             Term ::= Ident;
TConstructor.     Term ::= Constructor ;
TNum.             Term ::= Integer;
TLam.             Term ::= "\\" Ident "." Term ;
TLet.             Term ::= "let" LetBindings "in" Term;
TRedWeight.       Term ::= RedWeight Reduction1;
TRed.             Term ::= Reduction;
_.                Term ::= "(" Term ")";

RCase.       Reduction1 ::= "case" Term "of" "{" [CaseStm] "}";
RApp.        Reduction1 ::= Term Var;
RAppInd.     Reduction1 ::= Term "^" IndExpr Var;
RAddConst.   Reduction1 ::= "add" Integer Term;
RIsZero.     Reduction1 ::= "iszero" Term;
RSeq.        Reduction  ::= "seq" Term Term ;
RPlusWeight. Reduction  ::= Term "+" RedWeight Term;
RPlus.       Reduction  ::= Term "+" Term;
coercions Reduction 1;

DIndExpr. IndExpr ::= IntExpr1;
GeneralConstructor. Constructor ::= Ident [Var];
ConsConstructor. Constructor ::= Ident ":" Ident;
-- Ev inte cons här, men vi gör så just nu.
DVar. Var ::= Ident;
separator Var " ";

CaseStmAlts.     CaseStm ::= "alts";
CaseStmConcrete. CaseStm ::= Constructor "->" Term;
separator CaseStm ",";

--------------- Theorem --------------------

DTheorem.     Theorem ::= Proposition Proof;
separator Theorem "";
DProposition. Proposition ::= "proposition" ":" InContext Term ImpRel Term ".";
DProof.       Proof ::= "proof" ":" CommandName [CommandArgument] [SubProof] Qed ".";
DQed.         Qed ::= "qed";

WithContext. InContext ::= CapitalIdent "|-";
NoContext.   InContext ::= ;

Equal.      ImpRel ::= "=";
StrongImprovementLR. ImpRel ::= "|~>";
WeakImprovementLR.  Imprel ::= "|~~>";
StrongImprovementRL. ImpRel ::= "<~|";
WeakImprovementRL. ImpRel ::= "<~~|";
StrongCostEquiv. ImpRel ::= "<~>";
WeakCostEquiv. ImpRel ::= "<~~>";

token CommandName ((lower | '¤') (lower | '-' | '¤' | digit)*)

CAValue.          CmdArgument ::= CmdValue;
CAAssign.         CmdArgument ::= CmdAssignee "=" CmdValue ;
CAAssignSmallVar. CmdArgument ::= Ident "=" "\"" Term "\"";
CAAssignBigVar.   CmdArgument ::= CapitalIdent "=" "\"" Term "\"";

CVTerm. CmdValue ::= "\"" Term "\"";
CVVar. -- Hit kom jag på tisdag.


separator CommandArgument " ";

DSubProof. SubProof ::= CommandName
