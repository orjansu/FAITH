-- Grammar file used for pretty-printing Locally Nameless representations of
-- the language. Uses the same name for constructors as LocallyNameless.hs
-- Not intended for parsing

entrypoints Term;

TNonTerminating. Term ::= "@";
TVar. Term ::= Var;
TNum. Term ::= Integer;
TConstructor. Term ::= Ident "(" [Var] ")";
TLam. Term ::= "(\\" Term ")";
THole. Term ::= "[.]";
TLet. Term ::= "let" "{" [LetBinding] "}" "in" Term;
TDummyBinds. Term ::= "{" [Var] "}d^" Term;
TStackSpikes. Term ::= "[" Integer "]s^" Term;
THeapSpikes. Term ::= "[" Integer "]h^" Term;
TRedWeight. Term ::= "[" Integer "]" "^" Red;
TRAppNoW. Term ::= Term "<>" Var;
TRed. Term ::= Red;

LambdaVar.          Var ::= "a(" Integer ")";
LetVar.             Var ::= "e("Integer "," Integer")";
CaseConstructorVar. Var ::= "c(" Integer "," Integer")";
FreeVar.            Var ::= String;
separator Var ",";

LBWeight. LetBinding ::= "[" Integer","Integer "]=" Term;
LBNoWeight. LetBinding ::= Term;
separator LetBinding ",";

RApp. Red ::= Term Var;
RCase. Red ::= "case" Term "of" "{" [CaseStm] "}";
RPlusWeight. Red ::= Term "+" "[" Integer"]" Term;
RPlus. Red ::= Term "+" Term;
RAddConst. Red ::= "add" Integer Term;
RIsZero. Red ::= "iszero" Term;
RSeq. Red ::= "seq" Term Term;

DCaseStm. CaseStm ::= Ident "->" Term;
separator CaseStm ",";
DCVar. CVar ::= Var;
separator CVar " ";
