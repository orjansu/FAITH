entrypoints Term, LawList;

DLawList. LawList ::= [Law];

comment "--";
comment "{-" "-}";

DLaw. Law ::= Term ImpRel Term SideCond;
terminator Law ";";

DefinedEqual.        ImpRel ::= "\\equiv";
StrongImprovementLR. ImpRel ::= "\\imp";
WeakImprovementLR.   ImpRel ::= "\\kimp";
StrongImprovementRL. ImpRel ::= "\\impl";
WeakImprovementRL.   ImpRel ::= "\\kimpl";
StrongCostEquiv.     ImpRel ::= "\\costeq";
WeakCostEquiv.       ImpRel ::= "\\weakEquiv";
Reduction.           ImpRel ::= "\\to";

token MVLetBindings      ('G' digit*);
token MVValue            ('V');
token MVContext          ('C' | 'D');
token MVIntegerVar       ('v' | 'w' | 'n' | 'm' | 'i' | 'j');
token MVVar              ('x' | 'y' | 'f');
token MVVarVect          ('x' 's' | 'y' 's');
token MVValueContext     ('V' 'c' 't' 'x');
token MVReduction        ('R');
token MVVarSet           ('X');
token MVTerm             ('M' | 'N');
token MVPattern          ('p' 'a' 't');
token MVCaseStm          ('a' 'l' 't' 's' digit*);
token MVConstructorName  ('c' digit*);

TValueMetaVar.    Term1 ::= MVValue;
TGeneralMetaVar.  Term1 ::= MVTerm;
TVar.             Term1 ::= Var;
TAppCtx.          Term1 ::= "\\context<" MVContext ">" "[" Term "]";
TAppValCtx.       Term1 ::= "\\context<" MVValueContext ">" "[" Term "]";
TNonTerminating.  Term1 ::= "\\Omega" ;
TNum.             Term1 ::= Integer;
TIndVar.          Term  ::= Var "^" "<"IndExpr">";
TConstructor.     Term  ::= Constructor;
TLam.             Term  ::= "\\lambda" Var "." Term1 ;
TLet.             Term  ::= "\\letrec<" LetBindings "><" Term1">";
TStackSpike.      Term  ::= "\\stackSpike<><"Term1">";
TStackSpikes.     Term  ::= "\\stackSpike<"StackWeight"><" Term1">";
THeapSpike.       Term  ::= "\\heapSpike<" Term1">";
THeapSpikes.      Term  ::= "\\heapSpike<"HeapWeight"><" Term1">";
TDummyBinds.      Term  ::= "\\dummyRef<"VarSet "><" Term1">";
TRedWeight.       Term  ::= "\\weightSH<"RedWeight"><><(" Red ")>";
TRedWeightMetaVar. Term ::= "\\weightSH<"RedWeight"><><"MVReduction "[" Term "]>";
TRed.             Term  ::= Red;
TSubstitution.    Term  ::= Term "\\Sub<"Var"><" Var ">";

coercions Term 1;

RMetaVar.    Red ::= MVReduction "[" Term "]";
RCase.       Red ::= "\\caseSimple<" Term "><"[CaseStm] ">";
RApp.        Red ::= Term "\\," Var;
RAddConst.   Red ::= "\\add<"Integer"><" Term1">";
RIsZero.     Red ::= "\\iszero<" Term1">";
RSeq.        Red  ::= "\\seq<" Term1"><" Term1">";
RPlusWeight. Red  ::= Term "+" "\\weightSH<"RedWeight"><><" Term1">";
RPlus.       Red  ::= Term "+" Term1;

separator Var "";
VSMetaVar.  VarSet ::= MVVarSet;
VSConcrete. VarSet ::= "\\set<" [Var] ">"; -- variables are separated by space.
VSFreeVars. VarSet ::= "FV" "(" VarContainer ")";
VSDomain.   VarSet ::= "\\dom<" MVLetBindings">";
DVar.    Var ::= MVVar;

VCTerm.           VarContainer ::= Term;
VCMetaVarContext. VarContainer ::= MVContext;
VCMetaVarRed.     VarContainer ::= MVReduction;
VCValueContext.   VarContainer ::= MVValueContext;

-- TODO indexing
CSAlts.     CaseStm ::= MVCaseStm;
CSPattern.  CaseStm ::= MVPattern "\\to" Term;
CSConcrete. CaseStm ::= Constructor "\\to" Term;
separator CaseStm ",";

DConstructor. Constructor ::= MVConstructorName MVVarVect;

CTrue.        Constructor ::= "\\true";

CFalse.       Constructor ::= "\\false";

LBSOnlyMeta. LetBindings ::= [MetaBindSet];
LBSBoth.     LetBindings ::= [MetaBindSet] "\\set<" [LetBinding] ">";

MBSMetaVar.  MetaBindSet ::= MVLetBindings;
MBSSubstitution. MetaBindSet ::= MVLetBindings "\\Sub<"Var"><" Var ">";
separator MetaBindSet "";

DLetBinding. LetBinding ::= Var BindSymbol Term;
separator LetBinding ",";
BSNoWeight.  BindSymbol ::= "=";

DStackWeight. StackWeight ::= IntExpr;
DHeapWeight.  HeapWeight ::= IntExpr;
DIndExpr.     IndExpr ::= IntExpr1;

DIntegerVar. IntegerVar ::= MVIntegerVar;

IEVar.   IntExpr1 ::= IntegerVar;
IENum.   IntExpr1 ::= Integer;
IEPlus.  IntExpr  ::= IntExpr "+" IntExpr1;
IEMinus. IntExpr  ::= IntExpr "-" IntExpr1;
coercions IntExpr 1;

DRedWeight. RedWeight ::= StackWeight;

---- if-statements ---
NoSideCond. SideCond ::= ;
WithSideCond. SideCond ::= "if" BoolTerm;

BTSizeEq.   BoolTerm ::= "|" MVLetBindings "|" "=" "|" MVLetBindings "|";
BTSetEq.    BoolTerm ::= SetTerm "=" SetTerm;
BTSubsetOf. BoolTerm ::= SetTerm "\\subseteq" SetTerm;
BTIn.       BoolTerm ::= Var "\\in" SetTerm;

STMetaBindSet.  SetTerm1 ::= MetaBindSet;
STVarSet.       SetTerm1 ::= VarSet;
STUnion.        SetTerm ::= SetTerm "\\cup" SetTerm1;
coercions SetTerm 1;
