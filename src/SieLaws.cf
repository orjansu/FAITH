entrypoints LawList;

DLawList. LawList ::= [Law];

DLaw. Law ::= CommandName ":" Term ImpRel Term SideCond;
terminator Law ".";

token CommandName ('-' (letter | '¤' ) (letter | '-' | '¤' | digit| '\'')*);
-- copied from Sie.cf

DefinedEqual.        ImpRel ::= "=def=";
StrongImprovementLR. ImpRel ::= "|~>";
WeakImprovementLR.   ImpRel ::= "|~~>";
StrongImprovementRL. ImpRel ::= "<~|";
WeakImprovementRL.   ImpRel ::= "<~~|";
StrongCostEquiv.     ImpRel ::= "<~>";
WeakCostEquiv.       ImpRel ::= "<~~>";
Reduction.           ImpRel ::= "~~>";

token MVLetBindings      ('G' digit*);
token MVValue            ('V');
token MVContext          ('C' | 'D');
token MVIntegerVar       ('v' | 'w' | 'n' | 'm' | 'i' | 'j');
token MVVar              ('x' | 'y');
token MVVarVect          ('x' 's' | 'y' 's');
token MVValueContext     ('V' 'c' 't' 'x');
token MVReduction        ('R');
token MVVarSet           ('X');
token MVTerm             ('M' | 'N');
token MVPattern          ('p' 'a' 't');
token MVCaseStm          ('a' 'l' 't' 's')
token MVConstructorName  ('c');

TValueMetaVar.    Term1 ::= MVValue;
TGeneralMetaVar.  Term1 ::= MVTerm;
TVar.             Term1 ::= Var;
TAppCtx.          Term1 ::= MVContext "[" Term "]";
TAppValCtx.       Term1 ::= MVValueContext "[" Term "]";
TNonTerminating.  Term1 ::= "¤" ;
TNum.             Term1 ::= Integer;
TConstructor.     Term  ::= Constructor;
TLam.             Term  ::= "\\" Var "." Term1 ;
TLet.             Term  ::= "let" LetBindings "in" Term1;
TStackSpike.      Term  ::= "s^" Term1;
TStackSpikes.     Term  ::= "["StackWeight"]s^" Term1;
THeapSpike.       Term  ::= "h^" Term1;
THeapSpikes.      Term  ::= "["HeapWeight"]h^" Term1;
TDummyBinds.      Term  ::= VarSet "d^" Term1;
TRedWeight.       Term  ::= RedWeight "(" Red ")";
TRed.             Term  ::= Red;

RMetaVar.    Red ::= MVReduction "[" Term "]";
RCase.       Red ::= "case" Term "of" "{" [CaseStm] "}";
RApp.        Red ::= Term Var;
RAppInd.     Red ::= Var "^" IndExpr Var;
RAddConst.   Red ::= "add" Integer Term1;
RIsZero.     Red ::= "iszero" Term1;
RSeq.        Red  ::= "seq" Term1 Term1 ;
RPlusWeight. Red  ::= Term "+" RedWeight Term1;
RPlus.       Red  ::= Term "+" Term1;

separator Var "";
VSMetaVar.  VarSet ::= MVVarSet;
VSConcrete. VarSet ::= "{" [Var] "}"; -- variables are separated by space.
_.          VarSet ::= "{" VarSet "}"
DVar.    Var ::= MVVar;

-- TODO indexing
CSAlts.     CaseStm ::= MVCaseStm;
CSPattern.  CaseStm ::= MVPattern "->" Term;
CSConcrete. CaseStm ::= Constructor "->" Term;
separator CaseStm ",";

DConstructor. Constructor ::= MVConstructorName MVVarVect;
CTrue.        Constructor ::= "true";
CFalse.       Constructor ::= "false";

LBMetaVar.  LetBindings ::= MVLetBindings;
LBSet.      LetBindings ::= "{" [LetBinding] "}";
separator LetBinding ",";

DLetBinding. LetBinding ::= Var BindSymbol Term;
BSWeights.   BindSymbol ::= "=[" StackWeight "," HeapWeight "]=";
BSNoWeight.  BindSymbol ::= "=";

DStackWeight. StackWeight ::= IntExpr;
DHeapWeight.  HeapWeight ::= IntExpr;
DIndExpr.     IndExpr ::= IntExpr1;

DIntegerVar. IntegerVar ::= MVIntegerVar;

IEVar.   IntExpr1 ::= IntegerVar;
IENum.   IntExpr1 ::= Integer;
IEPlus.  IntExpr  ::= IntExpr "+" IntExpr1;
IEMinus. IntExpr  ::= IntExpr "-" IntExpr1;
coercions IntExpr 1;

DRedWeight. RedWeight ::= "[" StackWeight "]";

---- if-statements ---
NoSideCond. SideCond ::= ;
WithSideCond. SideCond ::= "if" BoolTerm;

BTSizeEq.   BoolTerm ::= "|" MVLetBindings "|" "=" "|" MVLetBindings "|";
BTSetEq.    BoolTerm ::= SetTerm "=" SetTerm;
BTSubsetOf. BoolTerm ::= SetTerm "subsetof" SetTerm;
BTIn.       BoolTerm ::= Var "in" SetTerm;


STFreeVars. SetTerm1 ::= "FV" "(" Term ")";
STDomain.   SetTerm1 ::= "dom" MVLetBindings;
STUnion.    SetTerm  ::= SetTerm "union" SetTerm1;
coercions SetTerm 1;
