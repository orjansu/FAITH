entrypoints LawList;

DLawList. LawList ::= [Law];

comment "--";
comment "{-" "-}";

DLaw. Law ::= CommandName ":" Term ImpRel Term SideCond;
terminator Law ";";
token CommandName ('-' (letter | '@' ) (letter | '-' | '@' | digit| '\'')*);
-- copied from Sie.cf

DefinedEqual.        ImpRel ::= "=def=";
StrongImprovementLR. ImpRel ::= "|~>";
WeakImprovementLR.   ImpRel ::= "|~~>";
StrongImprovementRL. ImpRel ::= "<~|";
WeakImprovementRL.   ImpRel ::= "<~~|";
StrongCostEquiv.     ImpRel ::= "<~>";
WeakCostEquiv.       ImpRel ::= "<~~>";
Reduction.           ImpRel ::= "~~>";

token MVLetBindings      ('G' digit*);
token MVValue            ('V');
token MVContext          ('C' | 'D');
token MVIntegerVar       ('v' | 'w' | 'n' | 'm' | 'i' | 'j');
token MVVar              ('x' | 'y' | 'f');
token MVVarVect          ('x' 's' | 'y' 's');
token MVValueContext     ('V' 'c' 't' 'x');
token MVReduction        ('R');
token MVVarSet           ('X');
token MVTerm             ('M' | 'N');
token MVPattern          ('p' 'a' 't');
token MVCaseStm          ('a' 'l' 't' 's' digit*);
token MVConstructorName  ('c' digit*);

TValueMetaVar.    Term3 ::= MVValue;
TGeneralMetaVar.  Term3 ::= MVTerm;
TVar.             Term3 ::= Var;
TAppCtx.          Term3 ::= MVContext "[" Term "]";
TAppValCtx.       Term3 ::= MVValueContext "[" Term "]";
TNonTerminating.  Term3 ::= "@" ;
TNum.             Term3 ::= Integer;
TIndVar.          Term3 ::= Var "^" IndExpr;
TConstructor.     Term3 ::= Constructor;
TStackSpike.      Term3  ::= "s^" Term3;
TStackSpikes.     Term3  ::= "["StackWeight"]s^" Term3;
THeapSpike.       Term3  ::= "h^" Term3;
THeapSpikes.      Term3  ::= "["HeapWeight"]h^" Term3;
TDummyBinds.      Term3  ::= VarSet "d^" Term3;
--TSubstitution.    Term3  ::= Term3 "[" Var "/" Var "]";
TRedMetaVar.      Term3 ::= MaybeRedWeight MVReduction "[" Term "]";

TRApp.        Term2 ::= Term2 Var;
TRAppW.       Term2 ::= RedWeight "(" Term2 Var ")";

TRPlus.    Term1    ::= Term1 "+" Term2;
TRPlusW1.  Term1    ::= RedWeight "(" Term1 "+" Term2 ")";
TRPlusW2.  Term1    ::= Term1 "+" RedWeight Term2;
TRPlusWW.  Term1    ::= RedWeight "(" Term1 "+" RedWeight Term2 ")";

TLam.             Term  ::= "\\" Var "." Term ;
TLet.             Term  ::= "let" LetBindings "in" Term;

TRCase.       Term ::= MaybeRedWeight "case" Term "of" "{" [CaseStm] "}";
TRAddConst.   Term ::= MaybeRedWeight "add" Integer Term1;
TRIsZero.     Term ::= MaybeRedWeight "iszero" Term1;
TRSeq.        Term ::= MaybeRedWeight "seq" Term3 Term3;

coercions Term 3;

WithRedWeight. MaybeRedWeight ::= RedWeight;
NoRedWeight.   MaybeRedWeight ::= ;

-- RMetaVar.    Term ::= MVReduction "[" Term "]";
-- RCase.       Term ::= "case" Term "of" "{" [CaseStm] "}";
-- RAddConst.   Term ::= "add" Integer Term3;
-- RIsZero.     Term ::= "iszero" Term3;
-- RSeq.        Term  ::= "seq" Term3 Term3 ;
-- RPlusWeight. Term  ::= Term "+" RedWeight Term3;
-- RPlus.       Term  ::= Term "+" Term3;

separator Var "";
VSMetaVar.  VarSet ::= MVVarSet;
VSConcrete. VarSet ::= "{" [Var] "}"; -- variables are separated by space.
_.          VarSet ::= "{" VarSet "}";
VSFreeVars. VarSet ::= "FV" "(" VarContainer ")";
VSDomain.   VarSet ::= "dom" MVLetBindings;
DVar.    Var ::= MVVar;

VCTerm.           VarContainer ::= Term;
VCMetaVarContext. VarContainer ::= MVContext;
VCMetaVarRed.     VarContainer ::= MVReduction;
VCValueContext.   VarContainer ::= MVValueContext;

-- TODO indexing
CSAlts.     CaseStm ::= MVCaseStm;
CSPattern.  CaseStm ::= MVPattern "->" Term;
CSConcrete. CaseStm ::= Constructor "->" Term;
separator CaseStm ",";

DConstructor. Constructor ::= MVConstructorName MVVarVect;

CTrue.        Constructor ::= "true";

CFalse.       Constructor ::= "false";

LBSOnlyMeta. LetBindings ::= [MetaBindSet];
LBSBoth.     LetBindings ::= [MetaBindSet] "{" [LetBinding] "}";

MBSMetaVar.  MetaBindSet ::= MVLetBindings;
MBSSubstitution. MetaBindSet ::= MVLetBindings "[" Var "/" Var "]";
separator MetaBindSet "";

DLetBinding. LetBinding ::= Var BindSymbol Term;
separator LetBinding ",";
BSWeights.   BindSymbol ::= "=[" StackWeight "," HeapWeight "]=";
BSNoWeight.  BindSymbol ::= "=";

DStackWeight. StackWeight ::= IntExpr;
DHeapWeight.  HeapWeight ::= IntExpr;
DIndExpr.     IndExpr ::= IntExpr1;

DIntegerVar. IntegerVar ::= MVIntegerVar;

IEVar.   IntExpr1 ::= IntegerVar;
IENum.   IntExpr1 ::= Integer;
IEPlus.  IntExpr  ::= IntExpr "+" IntExpr1;
IEMinus. IntExpr  ::= IntExpr "-" IntExpr1;
coercions IntExpr 1;

DRedWeight. RedWeight ::= "[" StackWeight "]";

---- if-statements ---
NoSideCond. SideCond ::= ;
WithSideCond. SideCond ::= "if" BoolTerm;

BTSizeEq.   BoolTerm ::= "|" MVLetBindings "|" "=" "|" MVLetBindings "|";
BTSetEq.    BoolTerm ::= SetTerm "=" SetTerm;
BTSubsetOf. BoolTerm ::= SetTerm "subsetof" SetTerm;
BTIn.       BoolTerm ::= Var "in" SetTerm;

STMetaBindSet.  SetTerm1 ::= MetaBindSet;
STVarSet.       SetTerm1 ::= VarSet;
STUnion.        SetTerm ::= SetTerm "union" SetTerm1;
coercions SetTerm 1;
