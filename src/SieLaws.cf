entrypoints LawList, MetaVar;

DLawList. LawList ::= [Law];

comment "--";
comment "{-" "-}";

DLaw. Law ::= CommandName ":" Term ImpRel Term SideCond;
terminator Law ";";
token CommandName ('-' (letter | '@' ) (letter | '-' | '@' | digit| '\'')*);
-- copied from Sie.cf

DefinedEqual.        ImpRel ::= "=def=";
StrongImprovementLR. ImpRel ::= "|~>";
WeakImprovementLR.   ImpRel ::= "|~~>";
StrongImprovementRL. ImpRel ::= "<~|";
WeakImprovementRL.   ImpRel ::= "<~~|";
StrongCostEquiv.     ImpRel ::= "<~>";
WeakCostEquiv.       ImpRel ::= "<~~>";

token MVLetBindings      ('G' digit*);
token MVValue            ('V');
token MVContext          ('C' | 'D');
token MVIntegerVar       ('v' digit* | 'w' digit* | 'n' | 'm' | 'i' | 'j');
token MVVar              ('x' | 'y' | 'f' | 'z');
token MVVarVect          ('x' 's' | 'y' 's');
token MVValueContext     ('V' 'c' 't' 'x');
token MVReduction        ('R');
token MVVarSet           ('X' | 'Y');
token MVTerm             ('M' | 'N');
token MVTerms            ('N' '_' 'i'); -- See note below
token MVPatterns         ('p' 'a' 't' '_' 'i'); -- See note below
token MVCaseStms         ('a' 'l' 't' 's' digit*);
token MVConstructorName  ('c' digit*);
-- NOTE: Currently, the system does not support multiple vectorized expressions.
-- Therefore, MVPatterns and MVTerms may only match on one string (currently
-- pat_i and N_i). If you wish to add multiple indexed expressions, you need to
-- make sure that nested indexed expressions work (see Substitution.hs) and that
-- the right terms are paired with the right patterns when checking arguments
-- in MiniTypeChecker.hs.

rules MetaVar ::= MVLetBindings | MVValue | MVContext | MVIntegerVar | MVVar | MVVarVect | MVValueContext | MVReduction | MVVarSet | MVTerm | MVTerms | MVPatterns | MVCaseStms | MVConstructorName;

TValueMetaVar.    Term4 ::= MVValue;
TGeneralMetaVar.  Term4 ::= MVTerm;
TMVTerms.         Term4 ::= MVTerms;
TVar.             Term4 ::= Var;
TAppCtx.          Term4 ::= MVContext "[" Term "]";
TAppValCtx.       Term4 ::= MVValueContext "[" Term "]";
TNonTerminating.  Term4 ::= "@" ;
TNum.             Term4 ::= Integer;
TIndVar.          Term4 ::= Var "^" IndExpr;
TConstructor.     Term4 ::= Constructor;
TStackSpike.      Term4  ::= "s^" Term4;
TStackSpikes.     Term4  ::= "["StackWeight"]s^" Term4;
THeapSpike.       Term4  ::= "h^" Term4;
THeapSpikes.      Term4  ::= "["HeapWeight"]h^" Term4;
TDummyBinds.      Term4  ::= VarSet "d^" Term4;
TRedMetaVar.      Term4 ::= MVReduction "[" Term "]";
TRedMetaVarW.     Term4 ::= RedWeight "^" MVReduction "[" Term "]" ;

TSubstitution.    Term3  ::= Term4 "[" Var "/" Var "]";

TRApp.        Term2 ::= Term2 Var;
TRAppW.       Term2 ::= RedWeight "(" Term2 Var ")";
TRAppNoW.     Term2 ::= Term2 "<>" Var;

TRPlus.    Term1    ::= Term1 "+" Term2;
TRPlusW1.  Term1    ::= RedWeight "(" Term1 "+" Term2 ")";
TRPlusW2.  Term1    ::= Term1 "+" RedWeight Term2;
TRPlusWW.  Term1    ::= RedWeight "(" Term1 "+" RedWeight Term2 ")";

TLam.             Term  ::= "\\" Var "." Term ;
TLet.             Term  ::= "let" LetBindings "in" Term;

TRCase.       Term ::= MaybeRedWeight "case" Term "of" "{" [CaseStm] "}";
TRAddConst.   Term ::= MaybeRedWeight "add" IntExpr Term1;
TRIsZero.     Term ::= MaybeRedWeight "iszero" Term1;
TRSeq.        Term ::= MaybeRedWeight "seq" Term4 Term4;

coercions Term 4;

WithRedWeight. MaybeRedWeight ::= RedWeight;
NoRedWeight.   MaybeRedWeight ::= ;

separator Var "";
VSMetaVar.  VarSet1 ::= MVVarSet;
VSVectMeta. VarSet1 ::= "{" MVVarVect "}";
VSConcrete. VarSet1 ::= "{" [Var] "}"; -- variables are separated by space.
_.          VarSet1 ::= "{" VarSet "}";
VSFreeVars. VarSet1 ::= "FV" "(" VarContainer ")";
VSDomain.   VarSet1 ::= "dom" MVLetBindings;
VSUnion.        VarSet ::= VarSet "union" VarSet1;
VSDifference.   VarSet ::= VarSet "\\\\" VarSet1;
coercions VarSet 1;

DVar.    Var ::= MVVar;

VCTerm.           VarContainer ::= Term;
VCMetaVarContext. VarContainer ::= MVContext;
VCMetaVarRed.     VarContainer ::= MVReduction;
VCValueContext.   VarContainer ::= MVValueContext;

CSAlts.     CaseStm ::= MVCaseStms;
CSPatterns. CaseStm ::= MVPatterns "->" Term;
CSConcrete. CaseStm ::= Constructor "->" Term;
separator CaseStm ",";

CGeneral.     Constructor ::= MVConstructorName MVVarVect;
CTrue.        Constructor ::= "True";
CFalse.       Constructor ::= "Talse";

LBSOnlyMeta. LetBindings ::= [MetaBindSet];
LBSBoth.     LetBindings ::= [MetaBindSet] "{" [LetBinding] "}";

MBSMetaVar.      MetaBindSet ::= MVLetBindings;
MBSSubstitution. MetaBindSet ::= MVLetBindings "[" Var "/" Var "]";
separator MetaBindSet "";

LBConcrete.   LetBinding ::= Var BindSymbol Term;
LBVectorized. LetBinding ::= MVVarVect BindSymbol MVVarVect;
separator LetBinding ",";
BSWeights.   BindSymbol ::= "=[" StackWeight "," HeapWeight "]=";
BSNoWeight.  BindSymbol ::= "=";

DStackWeight. StackWeight ::= IntExpr;
DHeapWeight.  HeapWeight ::= IntExpr;
DIndExpr.     IndExpr ::= IntExpr1;

DIntegerVar. IntegerVar ::= MVIntegerVar;

IEVar.   IntExpr1 ::= IntegerVar;
IENum.   IntExpr1 ::= Integer;
IESizeBind. IntExpr1 ::= "|" MVLetBindings "|";
IEPlus.  IntExpr  ::= IntExpr "+" IntExpr1;
IEMinus. IntExpr  ::= IntExpr "-" IntExpr1;
coercions IntExpr 1;

DRedWeight. RedWeight ::= "[" StackWeight "]";

---- if-statements ---
NoSideCond. SideCond ::= ;
WithSideCond. SideCond ::= "if" BoolTerm;

BTSizeEq.    BoolTerm1 ::= "|" MVLetBindings "|" "=" "|" MVLetBindings "|";
BTSetEq.     BoolTerm1 ::= VarSet "=" VarSet;
BTSubsetOf.  BoolTerm1 ::= VarSet "subsetof" VarSet;
BTIn.        BoolTerm1 ::= Var "in" VarSet;
BTNot.       BoolTerm1 ::= "not" BoolTerm1 ;
BTLE.        BoolTerm1 ::= IntExpr "=<" IntExpr;
BTGE.        BoolTerm1 ::= IntExpr ">=" IntExpr;
BTGT.        BoolTerm1 ::= IntExpr ">" IntExpr;
BTIsFresh.   BoolTerm1 ::= Var "is" "fresh";
BTAreFresh.  BoolTerm1 ::= MVVarVect "are" "fresh";
BTReducesTo. BoolTerm1 ::= MVReduction "[" MVValue "]" "~~>" Term;
BTAnd.       BoolTerm ::= BoolTerm "&&" BoolTerm1;

coercions BoolTerm 1;
