bindings {
G = {repeat =[0,0]= \x. (let {ys = repeat x} in (x:ys))};
}

-- there are comments
proposition: G |- let {xs = repeat x} in any(M) |~> let {xs = x : xs} in any(M);
proof:
  -fix-point-induction repeat
    -base{
      on whole -def-unwindings base;
      on ({repeat}d^@) -dummy-ref-algebra-8;
      on (@ x) -@-rules-3;
      on ({x}d^@) -@-rules-1 M=(x:xs);
    }
    -induction{
      on whole -def-unwindings n=n;
      on ([0]s^(?)) -spike-algebra-zero-stack-spike;
      on ((\x . ?) x) -reduction;
      on (s^?) -spike-algebra-13;
      on (let {ys = ?} in (x : ys)) -ih;
      on shown -value-merge';
    }
  qed;
