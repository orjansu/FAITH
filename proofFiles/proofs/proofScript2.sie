bindings {
G = {repeat =[0,0]= \x. (let {ys = repeat x} in (x:ys))};
}

-- notera att detta inte är ett korrekt bevis. Det är bara för att
-- visa ett bevis som inte använder rekursion.
proposition: G |- let {xs = repeat x} in any(M) |~> let {xs = x : xs} in any(M);
proof: -simple
  -single{
      let {xs = repeat^0 x} in any(M);
      on repeat -def-unwindings base;
      -- jag tror egentligen att första steget är bra, för då kan nästa rad autogenereras
      =def=  let {xs = {repeat}d^¤ x} in any(M);
      on ({repeat}d^¤) -dummy-ref-algebra-8;
      -- tror att "on" är bra för att begränsa sökning av nästa steg (autocomplete)
      |~> let {xs = ¤ x} in any(M);
      on (¤ x) -¤-rules-3;
      <~> let {xs = {x}d^¤} in any(M);
      on ({x}d^¤) -¤-rules-1 M=(x:xs);
      |~> let {xs = x:xs} in any(M);
      qed;
    }
  qed;
