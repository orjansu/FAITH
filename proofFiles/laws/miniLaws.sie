-unfold-1: let G {x =[v,w]= V} in C[x] |~> let G {x =[v,w]= V} in C[{x}d^V];
-unfold-2: let G {x =[v,w]= V} in C[x]
       <~| let G {x =[v,w]= V} in C[{x}d^([v]s^V)];
-unfold-3: let G {x =[v,w]= V} in C[x] <~> let G {x =[v,w]= V} in C[[v]s^V]
                                                 if x in FV(V);
-unfold-4: let G {x =[0,w]= V} in C[x] <~> let G {x =[0,w]= V} in C[{x}d^V];
-unfold-5: let G {x =[0,0]= V} in C[x] <~> let G {x =[0,0]= V} in C[V];

-- -R-case: [w]R[[v](case M of {pat_i -> N_i})]
--     <~> [w+v](case M of {pat_i -> [w]R[N_i]});

-value-merge: let G {x = V, y = V} in M |~> let G[x/y] {x = V[x/y]} in M[x/y];
-value-merge': let G {x = let {y = V} in V} in M
           |~> let G {x = V[x/y]} in M;
-value-copy:  let G {x = V, y = V} in M
          <~| let G[x/y] {x =[1,2]= V[x/y]} in M[x/y];

-case-fold: let{x =[v,w]= M} in C[case x of
                                  {alts, c ys -> D[{x}d^([v]s^(c ys))]}]
       |~> let{x =[v,w]= M} in C[case x of {alts, c ys -> D[x]}];

-def-unwindings-base: let {f =[w,v]= Vctx[f]} in C[f^0]
               =def= let {f =[w,v]= Vctx[f]} in C[{f}d^¤];
-def-unwindings-induction: let {f =[w,v]= Vctx[f]} in C[f^(n+1)]
                    =def= let {f =[w,v]= Vctx[f]} in C[[w]s^Vctx[f^n]];

-dummy-ref-algebra-8: {X}d^M |~> M;
-¤-rules-1: {X}d^¤ |~> M            if FV(M) subsetof X;
-¤-rules-3: R[¤] <~> {FV(R)}d^¤;
-spike-algebra-zero-stack-spike: [0]s^M <~> M;
-spike-algebra-13: [w]s^M |~> M;
