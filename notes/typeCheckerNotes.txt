konvertera när det inte finns viktnotation till att det är vikt 1,1
se till att bara reductions kan ha viktnotation - fixat tror jag
Se till att det är rätt uttryck som får ha wildcard och M
Kolla om man enkelt kan ändra pretty-printern. Annars ändra språket
så att det kan pretty-printas snyggt. ==> Gör detta på en separat branch. Testa om det räcker hyfsat att bara ta bort alla {} från term-språket.

Language notes:
{} versus : qed.
"" eller $$ runt termer?
Stora bokstäver på keywords för att inte krocka med kommandon?
c y vs f x är bara vad variabelnamnen heter. Jag tror att man behöver stora
bokstäver för konstruktorer av den anledningen.
ev göra om så att man kan skriva [2] s^M, men jag gillar mer [2]s^M. se
THeapSpikes t.ex.
--------för att allt ska funka:
Konstruktorer behöver vara stor bokstav och parentes runt argument
-commandonamn måste börja med '-' - byt till camelcase
-lägg till minus.
-ta bort extra typ för stach/heap weight?
-Kolla Ident vs Var - Ha var hela tiden, så kan det skilja sig mellan
laws och inte om det är metavar eller inte?
? eller _
--> I ett bevis, slutar saker processas efter HereMarker ($).
  effektivt sett blir det som att ha {- -} från HereMarker till
  slutet av det sub-beviset.

x Kolla varningar/ambiguitet!

Language notes, laws:
R, C, D, V, W, M, N måste nog vara reserverade.
V används både som value och som kontext. Lösning nu: context är Vctx[]
bara här används alts
blir det förvirrande med [] både för contexts, listor och vikter? och även substitutioner [x/y]
hur göra generella vektorer \vec{y}?
  - y1...yn
  - ->y
  - [y]
  - ys
Jag tror att allt ska vara reserverat här, även variabler. På det viset kan vi
säga ys och liknande.
=def=
X kan nu vara ett set med variabler, istället för {x}.
  lösning: {X}d^. Det är ett set av set, men det blir konstigt annars, om man
  ska ha ex FV(R) däri.
~~> reduces to
eventuellt får vi göra åtminstone case-fallet på ~~> via en funktion. Det är
nog rätt krångligt att supporta alla varianter av språket man erbjuder om man
introducerar indexering. Ev kolla på Ott.
<m + n> är den faktiska additionen. Ev ändra syntax.
true :: Constructor
false :: Constructor
FV -- Term or context -> Set(Var). Del av syntax och ej variabel

Language notes, patternmatch:
bara här används "?"

---------------Proofs:-----------
Ide: om man vill kanske man kan ha en av variablerna från laws.sie här?
t.ex.
  on "s^M" spike-algebra-13.
  istället för
  on "s^?" spike-algebra-13.
Eventuellt kan det vara okej att specificera mer nogrannt alla substitutionerna
när man använder ih.

Från beviset:
-- whole betyder hela termen. Det borde inte behövas fler parametrar.
-- jag skulle gärna vilja kunna ersätta "x : ys" med ?, men jag vet inte
-- hur svårt det skulle vara.
-- Detta är ju rätt najs ur ett checking-perspektiv. Vi kan parsea både
-- expressionen innan och efter och enskilt kolla så att de uppfyller kraven.
on ([0]s^(?)) -spike-algebra-zero-stack-spike; --"?" är wildcard. Detta är coolt om det funkar. Jag hittade inte en passande regel i figur 7.
on whole -def-unwindings n=n; --vet ej om argumentet till def-unwindings behövs
on ({repeat}d^¤) -dummy-ref-algebra-8;
-- tror att "on" är bra för att begränsa sökning av nästa steg (autocomplete)
let {xs = repeat^0 x} in any(M);
on repeat -def-unwindings base;
-- jag tror egentligen att första steget är bra, för då kan nästa rad autogenereras
-- Detta börjar likna ott rätt så rejält.
-- Testa att försöka uttrycka detta i Ott, och se vad det ger.
-- Ott har bara konkret syntax för variabler, så det blir krångligt.
Kommentar SimplerProofScript:
En sak som kan bli krångligt här är att man eventuellt vill
referera till variabelnamn som tolkaren har skrivit ut i repl.
Det kan göra bevisen mer svårlästa. Dock, om man bara skriver
denna filen helt själv är detta nog ungefär så mycket som man
skulle vilja skriva.

Language notes, detailed:
[.] som hole

---- Ev senare utveckling
-latex pretty print
-snyggare vanlig pretty print
-kolla Agda (men svårt tror jag)

---Cake slice --
kolla en expression mot en regel i laws.sie

---- Att kolla i typecheckern ---
Typecheck 1
x-Contexts används bara som argument
-Bindingar i InContext är deklarerade i bindings
-? används bara i on
variabler är deklarerade
   -alla variabler kan vara:
      x-deklarerade som fria i början
        x-bindningar i bindings får ej innehålla fria variabler
      x-bundna till en letbindning som binder till termen den nämns i
         dvs M i (let G in M)
      x-bundna till en konstruktor i en case-sats
      x-bundna till en annan let-bindning i samma let-sats
      x-bindna till en lambda som är relevant
   -any(M) -> M behöver vara deklarerad fri? - ja
   -stack weights:
      -idents måste vara deklarerade fria?
        -alternativt bundna i bindings, men det är nog överkurs.
      -deklarera dessa fria innan bindings
      -bindings får ha fria viktvariabler
-Konstruktorer är deklarerade och fyllda
   -syntax för att deklarera dem saknas. (ngt i Bindings)
-> kolla bara bevis fram till <==here-symbolen.
x-alla bindande variabler är unika

-Korrekthet av bevis
  -Endast rätt relationssymbol får användas mellan varje term
  -Transformationerna måste stämma gentemot regeln
  -extra villkor om fria variabler osv måste respekteras
  -induktion: börja och sluta rätt
  -totalt sett: börja och sluta rätt
  -on-termen måste matcha mot föregående term
  -Senare: Regler:
    -Metavariabler som refereras till i regler finns
    -Regler finns deklarerade i laws.sie
    -Regler ska ha en matchande relationssymbol (specificera detta i laws.hs?)
    -Insättning av substitutionerna är korrekt
-typning av variabler? nej, inte nu.
-I och med att man har en metod som skapar en LNL-representation och den används endast för att jämföra, kommer hela representationen endast räknas ut om de två termerna är lika, pga lazyness. Detta borde man kunna testa genom att jämföra två oändliga termer som är olika efter ett ändligt antal steg.

- Det är bara rimligt att substituera fria variabler. Om man vi ll byta namn på bundna variabler får man göra det via alpha-equiv.

--- checking detailed proof: ---
substitutions, alpha equivalence, check subterm in main term
-apply the substitutions to the left side of the law
-check that the result is $\alpha$-equivalent to the subterm
-check that the subterm is a proper subterm of the main term
-apply the substitutions to the right side of the law
-check that if the result of this substitution replaces the subterm in the first term, the result is alpha-equivalent to the second term


--- Desugaring ---
ingen vikt = [1,1]
inContext: G |- M <~> N == let G in M <~> let G in N
Reductions: show which term is the hole
bara en alts i CaseStm - eller kanske ta bort alts?
gör om variabler till ngn slags de brujin
  -sortera termer i Let?  -nej

-- Typcheckning av laws ---
index _i _j etc får endast användas på plats TODO fortsätt.
 -case A of B
 -case A of {B -> C}
 -case A of {alts, D -> E
tillåt inte
let in x
eller låt det bara vara ekvivalent med let {} in x

---------- Correctness properties (för Quickcheck) --------------------------
-Jag kommer göra en funktion som ger fräsha variabelnamn till en term, givet
ett set av redan tagna namn.
prop_rename_equiv :: T.Term -> Prop
prop_rename_equiv term1 =
  let vars = getVars term1
      term2 = withFreshVars term1 vars
  term `alphaEquiv` term2
  (Om jag gör en som renamear bara de som behövs, så borde jag kunna göra
  en variant när bara ett subset av variabler renameas)
-även om ex \x\y\z(x+y+z) =def= \a\b\c(a+b+c) så x+y+z !=def= a+b+c
prop_typechecking :: UT.Program -> Monad prop
prop_typechecking p = typed <- typecheck p
                      let untyped = ShowTypedTerm.toUntyped typed
                      typed2 <- typecheck untyped
                      return (typed == typed2) && (p == untyped)
prop_get_subTerm_insert :: Context -> Term
prop_get_subterm_insert C M = N <- getSubterm C M
                              M' <- insert C N
                              M `alphaEq` M'
forall terms .
  - getBoundVariables term `Set.intersection` getFreeVariables term = Set.empty
  - getBoundVariables term `Set.union` getFreeVariables term
      = getAllVariables term

forall terms M, Sets S
  M2 <- renameNeeded M S
  getBoundVariables M2 `Set.disjoint` S
------------ Övriga idéer --------------
-Istället för att göra separata bevisregler som jobbar på enskilda bevis, gör bevisregler som jobbar mellan bevis som är i samma fil. Ge bevisen namn och ha sen en regel för induktion som är
Grund -> M
IH |- Induktion -> M
eller en bevisprincip som går på case-satserna
-Skriv explicit vilka regler som beviset använder genom att ge namnet på lagfilen de ligger i. Då kan man även lägga till egna regler, t.ex. induktiva hypotesen
- Skippa att behöva implementera matching i detta fallet genom att be användaren specificera både subterm och kontext. Detta innebär att jag nog bara behöver implementera substitution/transformation på ett korrekt sätt.
- Det borde gå att skapa termer utan att behöva oroa sig så mycket över typning om man tar bort applikation, konstruktörer och case-satser. Altså att man i princip bara har plus. Då kommer typen på allting vara Int. Risken är att den inte terminerar. Om det blir ett problem så kan man göra så att let-satser inte är rekursiva, men då tar man bort mycket av spacet av program.

-------------- Alpha equivalence ------------
När man bara kollar alpha-ekvivalens mellan bara let-bindings, skulle man kunna
göra så att
  -- | For now, the order of let-bindings does not matter,
  -- but the names of the variables does matter. This means that
  -- let {x = 1, y = 2} in 1 =alpha= let {y = 2, x = 1} in 1
  -- but
  -- let {x = 1, y = 2} in 1 =NotAlpha= let {y = 1, x = 2} in 1
  -- This incurs a O(n! + n*t) complexity but  not O(n!*n*t*r), where
  -- n=num(bindings), t is the time complexity for checking
  -- alpha equivalence between two terms and r is the time complexity
  -- for renaming a single term with the new ordering of bindings
Vilket skulle vara bra för att kolla att en regel med subtitutioner
skulle vara alpha-ekvivalent med starttermen. Ett par saker man kan uttnytja
för att inte testa alla ordningar:
- Det finns, i de nuvarande lagarna ingen C[let G in M], vilket gör att det
  - Finns ett konstant antal let:s
  - Är en konstant längd från start på regeltermen till alla let:s som är
    specificerade.
Om man skulle testa alla ordningar skulle man göra i princip, i en special, som
bara är för att testa en substituerad regel mot en term:
- Om inte alpha-eq
- Om den o-substituerade regeltermen har en let:
  - Skapa alla permutationer av första let:en i termen
    - Om det inte är alpha-eq, skapa alla permutationer av andra let:en i termen
    - osv
  - Det skulle vara smart om man bara ändrar permutationer på let:s som finns i
    den osubstituerade regeltermen och inte alla let:s i hela termen.
En annan approach är att när man substituerar, så sparar man vilka ordningar man har bytt, och använder det för att skapa alpha-ekvivalens. Det blir lite krångligare och mindre generellt, och inte lika självklart att det blir likadant. Jag tror mer på approachen ovan.

-------------- Matching Contexts on terms -------------------------
Variationer:
C may contain more than one hole. In that case, all subterms matching those
holes in M has to be alpha-equivalent. However, C needs to be a syntactic
copy of M, with some of its subterms replaced with holes. That is, the
variable names has to match, so in C[N] =alpha= M, only the names of bound
variables in N may vary, not the bound variables in C.

Note: I could easily make it so that subterms that do not contain holes can
be alpha-equivalent and not needing their variable names match.

getSubterm' :: C M (potential N)
The potential N is to make sure that if the term contains more than
one hole, the terms in all of the holes should be alpha-equivalent.

Jag är osäker på vilka implementationer och frihetsgrader som skulle vara korrekta.
TODO: fråga om detta på måndag.

TODO: Gör så att kontexter har et set av deras bundna variabler. På detta sättet blir alpha-ekvivalens av kontexter korrekta. Det är de inte nu tror jag.

-------------- Saker att ta upp på presentationen -----------------------------
-Först trodde att det fanns ngt verktyg som kan göra detta åt en - insåg nej
-Sen trodde att UNIE enkelt kan expanderas - nej
-Sen göra själv.
  -Vision (kort)
  -Status (demo av alpha-eq, och ev ev ev en enkel transformation)
  -Variabel-representation
    -Lösning: Unika namn och De Bruijn
    -Endast de bruijn - krångligt vid alpha-eq av subtermer samt generell spec
     av transformationer
    -Endast unika namn - ingen alpha-ekvivalens, men enkel spec av
     transformationer
    -HOAS shallow embedding - krångligt att visa termer, modifiera dem, och
     i allmänhet göra särskilt mycket annat än typ beta-reduktion tror jag...
  -Set
    -Case och Letrecs.
      -Case: fastställ en ordning på konstruktorer
      -Letrec
        -Semantiken säger att varken ordning eller namn på variabler spelar roll
          -Om namn skulle spela roll: Hitta snabbt (O(n!)) ordning på variabler
          -Om ordning skulle spela roll: Kör bara alpha-eq rakt på.
            -Detta är okej i alla fall förutom när man ska alpha-eq-kolla
             substituerade regler mot termer
  -Läs artikeln om matching

-- TODO -- Glöm inte
> Vid <~> som används med |~>, ha ngt sätt att indikera vilken riktning som
används.
